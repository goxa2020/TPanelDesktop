# Generated by Django 5.0.3 on 2025-03-26 16:07

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='Имя пользователя для отображения в системе', max_length=100)),
                ('email', models.EmailField(db_index=True, help_text='Email пользователя, используется для входа', max_length=254, unique=True)),
                ('image', models.ImageField(default=False, help_text='Фотография профиля пользователя', upload_to='user_images')),
                ('birthday', models.DateField(blank=True, help_text='Дата рождения пользователя', null=True)),
                ('verified', models.BooleanField(default=False, help_text='Статус верификации пользователя')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название проекта', max_length=150)),
            ],
            options={
                'verbose_name': 'проект',
                'verbose_name_plural': 'проекты',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('student_group', models.CharField(blank=True, max_length=15, null=True)),
            ],
            options={
                'verbose_name': 'ученик',
                'verbose_name_plural': 'ученики',
            },
            bases=('backend_api.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('teacher_achievements', models.CharField(blank=True, help_text='Достижения и награды учителя', max_length=150, null=True)),
            ],
            options={
                'verbose_name': 'учитель',
                'verbose_name_plural': 'учителя',
            },
            bases=('backend_api.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, help_text='Название задачи', max_length=150, null=True)),
                ('description', models.TextField(blank=True, help_text='Описание задачи', null=True)),
                ('deadline', models.DateField(blank=True, help_text='Крайний срок выполнения задачи', null=True)),
                ('done', models.BooleanField(default=False, help_text='Статус выполнения задачи')),
                ('project', models.ForeignKey(blank=True, help_text='Проект, к которому относится задача', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='backend_api.project')),
            ],
            options={
                'verbose_name': 'Задача',
                'verbose_name_plural': 'Задачи',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='students',
            field=models.ManyToManyField(blank=True, help_text='Ученики, участвующие в проекте', related_name='projects', to='backend_api.student'),
        ),
        migrations.AddField(
            model_name='project',
            name='teacher',
            field=models.ForeignKey(help_text='Учитель, ведущий проект', on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='backend_api.teacher'),
        ),
    ]
